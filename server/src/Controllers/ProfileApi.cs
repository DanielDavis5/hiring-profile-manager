/*
 * Hiring Profile Management Specification
 *
 * An interface specification for a server that manages potential employee profiles. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: Daniel.Maurice.Davis@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using HiringManagerServer.Attributes;
using HiringManagerServer.Models;
using HiringManagerServer.Application.Domain;

namespace HiringManagerServer.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProfileApiController : ControllerBase
    {
        public ProfileApiController(IProfileManager profileManager)
        {
            this.ProfileManager = profileManager;
        }

        private IProfileManager ProfileManager { get; }

        /// <summary>
        /// Get a profile
        /// </summary>
        /// <remarks>Request a profile. </remarks>
        /// <param name="profileId">The profille identifier.</param>
        /// <response code="200">A profile.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/v1/profiles/{profileId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetProfile")]
        [SwaggerResponse(statusCode: 200, type: typeof(Profile), description: "A profile.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "Forbidden")]
        public virtual IActionResult GetProfile([FromRoute][Required] long profileId)
        {
            if (!ProfileManager.GetProfile(profileId, out Profile profile))
            {
                return StatusCode(400,
                new ProblemDetails()
                {
                    Title = "Invalid profileId",
                    Detail = "Profile with the profileId was not found.",
                    Status = 400
                });
            }

            return StatusCode(200, profile);
        }

        /// <summary>
        /// Get profiles.
        /// </summary>
        /// <remarks>Request available hire profiles. </remarks>
        /// <response code="200">A list of basic profile information. </response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/v1/profiles")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetProfiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProfileAbstract>), description: "A list of basic profile information. ")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "Forbidden")]
        public virtual IActionResult GetProfiles()
        {
            return StatusCode(200, ProfileManager.GetAvailableProfiles());
        }
    }
}
