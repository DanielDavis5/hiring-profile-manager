/*
 * Hiring Profile Management Specification
 *
 * An interface specification for a server that manages potential employee profiles. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: Daniel.Maurice.Davis@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using HiringManagerServer.Attributes;
using HiringManagerServer.Models;
using HiringManagerServer.Application;

namespace HiringManagerServer.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthenticationApiController : ControllerBase
    {
        /// <summary>
        /// Initializes a new instance of the AuthenticationApiController class.
        /// </summary>
        public AuthenticationApiController(TokenConfiguration tokenConfiguration)
        {
            TokenConfiguration = tokenConfiguration;
        }

        private TokenConfiguration TokenConfiguration { get; }

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>Attempt to authenticate with the server. </remarks>
        /// <param name="credentials"></param>
        /// <response code="200">Authentication succeeded. </response>
        /// <response code="401">Authentication failed. </response>
        [HttpPost]
        [Route("/v1/login")]
        [ValidateModelState]
        [SwaggerOperation("Login")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Authentication succeeded. ")]
        [SwaggerResponse(statusCode: 401, type: typeof(ProblemDetails), description: "Authentication failed. ")]
        public virtual IActionResult Login([FromBody] Credentials credentials)
        {
            return TryAuthenticate(credentials, out string tokenString)
                ? StatusCode(200, tokenString)
                : StatusCode(
                    401,
                    new ProblemDetails()
                    {
                        Title = "Login Failed",
                        Detail = "Invalid username or password",
                        Status = 401
                    }
                );
        }

        private bool TryAuthenticate(Credentials credentials, out string tokenString)
        {
            if (credentials.Password != "password")
            {
                tokenString = null;
                return false;
            }

            JwtSecurityToken token;
            switch (credentials.Username.ToLower())
            {
                case "user":
                    token = new JwtSecurityToken(
                        claims: new Claim[] { new Claim(ClaimTypes.Role, "user") },
                        expires: DateTime.Now.AddMinutes(TokenConfiguration.ExpiryInMinutes),
                        signingCredentials: TokenConfiguration.Credentials
                    );
                    break;

                case "superuser":
                    token = new JwtSecurityToken(
                        claims: new Claim[] { new Claim(ClaimTypes.Role, "superuser") },
                        expires: DateTime.Now.AddMinutes(TokenConfiguration.ExpiryInMinutes),
                        signingCredentials: TokenConfiguration.Credentials
                    );
                    break;

                default:
                    tokenString = null;
                    return false;
            }

            tokenString = new JwtSecurityTokenHandler().WriteToken(token);
            return true;
        }
    }
}
