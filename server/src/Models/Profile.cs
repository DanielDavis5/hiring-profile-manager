/*
 * Hiring Profile Management Specification
 *
 * An interface specification for a server that manages potential employee profiles. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: Daniel.Maurice.Davis@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using HiringManagerServer.Converters;

namespace HiringManagerServer.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Profile : ProfileAbstract, IEquatable<Profile>
    {
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Birth
        /// </summary>
        [DataMember(Name = "Birth", EmitDefaultValue = false)]
        public DateTime Birth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Birth: ").Append(Birth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Profile)obj);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="other">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ProfileId == other.ProfileId ||

                    ProfileId.Equals(other.ProfileId)
                ) &&
                (
                    Firstname == other.Firstname ||
                    Firstname != null &&
                    Firstname.Equals(other.Firstname)
                ) &&
                (
                    Lastname == other.Lastname ||
                    Lastname != null &&
                    Lastname.Equals(other.Lastname)
                ) &&
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) &&
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) &&
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) &&
                (
                    Birth == other.Birth ||
                    Birth != null &&
                    Birth.Equals(other.Birth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + ProfileId.GetHashCode();
                if (Firstname != null)
                    hashCode = hashCode * 59 + Firstname.GetHashCode();
                if (Lastname != null)
                    hashCode = hashCode * 59 + Lastname.GetHashCode();
                if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Birth != null)
                    hashCode = hashCode * 59 + Birth.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Profile left, Profile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Profile left, Profile right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
